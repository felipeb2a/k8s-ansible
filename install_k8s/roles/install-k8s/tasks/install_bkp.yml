- name: Making iptables see aggregated traffic
  shell: lsmod | grep br_netfilter

- name: Configuration docker use the systemd
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/docker/daemon.json
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
        "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF

- name: Add overlay k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'overlay'
    state: present
    create: yes

- name: Add br_netfilter k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'br_netfilter'
    state: present
    create: yes

- name: Add ip_vs_rr k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'ip_vs_rr'
    state: present
    create: yes

- name: Add ip_vs_wrr k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'ip_vs_wrr'
    state: present
    create: yes

- name: Add ip_vs_sh k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'ip_vs_sh'
    state: present
    create: yes

- name: Add nf_conntrack_ipv4 k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'nf_conntrack_ipv4'
    state: present
    create: yes

- name: Add ip_vs k8s
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: 'ip_vs'
    state: present
    create: yes

- name: modprobe overlay
  shell: modprobe overlay

- name: modprobe br_netfilter
  shell: modprobe br_netfilter

- name: Add netbridge config ip4
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: 'net.bridge.bridge-nf-call-iptables = 1'
    state: present
    create: yes

- name: Add netbridge config ip6
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: 'net.bridge.bridge-nf-call-ip6tables = 1'
    state: present
    create: yes

- name: Add ipv4 foward
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: 'net.ipv4.ip_forward = 1'
    state: present
    create: yes

- name: update sysctl
  command: sysctl --system

#- name: Install containerd.io
#  shell: apt -y install containerd.io

#- name: Configure containerd
#  shell: mkdir -p /etc/containerd && containerd config default | tee /etc/containerd/config.toml

#- name: Enable systemd_cgroup
#  shell: sed -i 's/systemd_cgroup = false/systemd_cgroup = true/' /etc/containerd/config.toml

#- name: Error systemd_cgroup
#  shell: rm /etc/containerd/config.toml && systemctl restart containerd

#- name: Restart Containerd
#  shell: systemctl restart containerd && systemctl start containerd && systemctl enable containerd

- name: Add Docker’s official GPG key Step 1
  shell: install -m 0755 -d {{ folder_keys }}

- name: Add Docker’s official GPG key Step 2
  shell: curl -fsSl {{ url_key_docker }} | gpg --dearmor -o {{ folder_key_docker }} | chmod a+r {{ folder_key_docker }}

- name: Add Docker’s official GPG key Step 3
  shell: chmod a+r {{ folder_key_docker }}

- name: Use the following command to set up the repository
  shell: echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

- name: 'Atualizando o repo'
    raw: 'apt -y update'

- name: Install Docker Engine
  apt:
    name: '{{ packages }}'
  vars:
    packages:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin

- name: apt-mark hold docker
  shell: apt-mark hold docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

- name: Configuration docker use the systemd
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/docker/daemon.json
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
        "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF

#- name: Instalando o Docker
#  shell: curl -fsSl {{ url_docker }} | bash

- name: Adicionando as chaves do repo apt do k8s-master
  apt_key:
    url: '{{ url_key_k8s }}'
    state: present

- name: Adicionando o repo do k8s
  apt_repository:
    repo: deb {{ url_repo_k8s }} kubernetes-xenial main
    state: present

- name: Instalando os pacotes kubeadm, kubelet e kubectl
  apt:
    name: '{{ packages }}'
  vars:
    packages:
    - kubelet
    - kubeadm
    - kubectl

- name: apt-mark hold
  shell: apt-mark hold kubelet kubeadm kubectl